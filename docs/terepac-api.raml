#%RAML 1.0
title: Terepac ONE
version: v2
baseUri: https://api.terepac.one/{version}
annotationTypes:
  role:
    enum: [ADMIN]
securitySchemes:
  JWT:
    description: A JSON Web Token & Client ID must be sent in the request header.
    type: x-jwt
    describedBy:
      headers:
        x-access-token:
          type: string
          description: A JWT access token. Get the JWT using /authenticate
        x-client-id:
          type: string
          description: Your unique client ID.
      responses:
        417:
          body:
            application/json:
              example: |
                {
                  "code": "417",
                  "message": "invalid api key"
                }
documentation:
  - title: Welcome
    content: |
      The Terepac ONE RESTful API uses JSON Web Tokens (JWT) to authenticate each
      request. Each secured request requires the following 2 HTTP headers:
      ```
      x-client-id: [client ID]
      x-access-token: [jwt]
      ```
      As we are only in alpha right now, only Terepac partners can get a
      login. If you are a partner, please contact
      [Darryl Patterson](mailto:darryl.patterson@terepac.com).
      Please see the AUTHENTICATION documentation to find out how to get
      your JWT.

/authentication:
  displayName: AUTHENTICATION
  description: |
    Pass on the email address and password as JSON. The system will return
    a JWT that will be used for future secured API requests.

    If there is an issue with the client ID or JWT, the system will return
    an error as a JSON document. Here are the two possible error responses:
    ```
    HTTP status code 401
    {
      message: 'The supplied x-access-token (JWT) is not valid.'
    }
    ```
    ```
    HTTP status code 401
    {
      message: 'One or both of the required headers (x-client-id, x-access-token) are missing.'
    }
    ```
  post:
    description: |
      Authenticates the user and returns a JSON Web Token.
    body:
      application/json:
        example: |
          {
            "email": "john@example.com",
            "password": "super_secret"
          }
    responses:
      200:
        description: Authenticate was successful.
        body:
          application/json:
            example: |
              {
                "message": "Authentication successful.",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
              }
      404:
        description: The email and/or the password were incorrect.
        body:
          application/json:
            example: |
              {
                "message": "Authentication failed. User not found."
              }
      409:
        description: There is no client associated with the user. Contact Terepac to get this fixed.
        body:
          application/json:
            example: |
              {
                "message": "No client associated with user."
              }
/assets/{id}:
  displayName: ASSETS
  description: |
    Lets you manupulate assets.

  securedBy:
    - JWT
  get:
    description: Gets a single asset.
    responses:
      200:
        description: Gets a single asset.
        body:
          application/json:
            example: |
              {
                "_id": "OBJECT_ID",
                "created": "DATE",
                "updated": "DATE",
                "tagCode": "STRING",
                "name": "STRING",
                "description": "STRING"
              }

  put:
    description: Updates an asset.
    body:
      application/json:
        example: |
          {
            "tagCode": "STRING",
            "name": "STRING",
            "description": "STRING"
          }

    responses:
      200:
        description: Asset updated.
        body:
          application/json:
            example: |
              {
                "_id": "OBJECT_ID",
                "created": "DATE",
                "updated": "DATE",
                "tagCode": "STRING",
                "name": "STRING",
                "description": "STRING"
              }

  /devices:
    securedBy:
      - JWT
    get:
      description: Gets an array of devices attached to this asset.
      responses:
        200:
          description: Returns an array of devices.
          body:
            application/json:
              example: |
                [{
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "serialNumber": "STRING",
                  "type": "STRING",
                  "tagCode": "STRING",
                  "description": "STRING",
                  "geolocation": [NUMBER, NUMBER],
                  "sensors":[{
                    "tagCode": "STRING",
                    "type": NUMBER,
                    "typeString": "STRING",
                    "description": "STRING",
                    "unit": "STRING"
                  }],
                  "settings": [{
                    "name": "STRING",
                    "dataType": "STRING",
                    "value": MIXED
                  }]
                }]

    /{id}/add:
      securedBy:
        - JWT
      post:
        description: Adds this device to this asset.
        responses:
          200:
            description: Deviced added to asset.
            body:
              application/json:
                example: |
                  {
                    "message": "Device added."
                  }

    /{id}/remove:
      securedBy:
        - JWT
      delete:
        description: Removes this device from this asset.
        responses:
          200:
            description: Deviced removed from asset.
            body:
              application/json:
                example: |
                  {
                    "message": "Device removed."
                  }
/clients:
  displayName: CLIENTS
  description: |
    Lets you manipulate and access client data and telemetry tags.
  securedBy: [JWT]
  get:
    description: |
      Allows you to get a list of the clients you are allowed to access based on
      the user's role. If the user belongs to a company that's a reseller, an
      array of the reseller's clients is returned.
    responses:
      200:
        description: Returns an array of clients.
        body:
          application/json:
            example: |
              [
                {
                  "_id": : "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "apikey": {
                    "id": "STRING"
                  },
                  "companyName": "STRING",
                  "address": {
                    "street": "STRING",
                    "street2": "STRING",
                    "city": "STRING",
                    "province": "STRING",
                    "postalCode": "STRING",
                    "country": "STRING"
                  },
                  "contact": {
                    "firstName": "STRING",
                    "lastName": "STRING",
                    "email": "STRING",
                    "phone": "STRING"
                  },
                  "reseller": BOOLEAN
                }
              ]
      400:
        description: Database error adding the client.
        body:
          application/json:
            example: |
              {
                message: "Error inserting the client: [ERROR_MESSAGE]"
              }
      401:
        description: Not authorized.
        body:
          application/json:
            example: |
              {
                message: "You are not authorized to access this resource."
              }
      404:
        description: Client not found.
        body:
          application/json:
            example: |
              {
                message: "Client not found"
              }
  post:
    (role) : ADMIN
    description: |
      Allows you to add a new client. You must be a reseller or be an admin to
      add a new client.
    body:
      application/json:
        example: |
          {
            "companyName": "STRING",
            "address": {
              "street": "STRING",
              "street2": "STRING",
              "city": "STRING",
              "province": "STRING",
              "postalCode": "STRING",
              "country": "STRING"
            },
            "contact": {
              "firstName": "STRING",
              "lastName": "STRING",
              "email": "STRING",
              "phone": "STRING"
            },
            "reseller": BOOLEAN
          }
    responses:
      200:
        description: Returns the added client.
        body:
          application/json:
            example: |
              {
                "_id": : "OBJECT_ID",
                "created": "DATE",
                "updated": "DATE",
                "apikey": {
                  "id": "STRING"
                },
                "companyName": "STRING",
                "address": {
                  "street": "STRING",
                  "street2": "STRING",
                  "city": "STRING",
                  "province": "STRING",
                  "postalCode": "STRING",
                  "country": "STRING"
                },
                "contact": {
                  "firstName": "STRING",
                  "lastName": "STRING",
                  "email": "STRING",
                  "phone": "STRING"
                },
                "reseller": BOOLEAN
              }
  /{id}:
    description: |
      Allows you to work with an individual client.
    securedBy: [JWT]
    uriParameters:
      id:
        description: The clients's ObjectId.
        type: string
    get:
      description: |
        Returns a single client.
      responses:
        200:
          description: Returns a client.
          body:
            application/json:
              example: |
                {
                  "_id": : "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "apikey": {
                    "id": "STRING"
                  },
                  "companyName": "STRING",
                  "address": {
                    "street": "STRING",
                    "street2": "STRING",
                    "city": "STRING",
                    "province": "STRING",
                    "postalCode": "STRING",
                    "country": "STRING"
                  },
                  "contact": {
                    "firstName": "STRING",
                    "lastName": "STRING",
                    "email": "STRING",
                    "phone": "STRING"
                  },
                  "reseller": BOOLEAN
                }
    put:
      description: |
        Allows you to edit a client. All fields are optional. You cannot change
        a password with this endpoint (see USERS endpoint).
      body:
        application/json:
          example: |
            {
              "companyName": "STRING",
              "address": {
                "street": "STRING",
                "street2": "STRING",
                "city": "STRING",
                "province": "STRING",
                "postalCode": "STRING",
                "country": "STRING"
              },
              "contact": {
                "firstName": "STRING",
                "lastName": "STRING",
                "email": "STRING",
                "phone": "STRING"
              },
              "reseller": BOOLEAN
            }
      responses:
        200:
          description: Client saved.
          body:
            application/json:
              example: |
                {
                  "_id": : "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "apikey": {
                    "id": "STRING"
                  },
                  "companyName": "STRING",
                  "address": {
                    "street": "STRING",
                    "street2": "STRING",
                    "city": "STRING",
                    "province": "STRING",
                    "postalCode": "STRING",
                    "country": "STRING"
                  },
                  "contact": {
                    "firstName": "STRING",
                    "lastName": "STRING",
                    "email": "STRING",
                    "phone": "STRING"
                  },
                  "reseller": BOOLEAN
                }
    /tags:
      securedBy: [JWT]
      get:
        description: Gets a list of the client's tags.
        responses:
          200:
            description: Returns the available tags for the client.
            body:
              application/json:
                example: |
                  [{
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "description": {
                      "location": "STRING",
                      "asset": "STRING",
                      "sensor": "STRING"
                    },
                    "tag": {
                      "full": "STRING",
                      "clientTagCode": "STRING",
                      "locationTagCode": "STRING",
                      "assetTagCode": "STRING",
                      "sensorTagCode": "STRING"
                    },
                    "active": BOOLEAN,
                    "activeStart": "DATE",
                    "historical": {
                      "start": "DATE",
                      "end": "DATE"
                    }
                  }]
    /telemetries/search:
      securedBy: [JWT]
      description: |
        Allows you to search multiple tags. Returns an array of telemetry
        data.
      get:
        description: Queries for telemetry using tags.
        queryParameters:
          tags:
            type: string
            description: A comma delimited list of tags.
            example: tags=D001_LOC1_TI,D002_LOC1_EI
          start:
            type: string
            description: The start date of the data.
            example: start=2016-01-29T16:04:27.000Z
          end:
            type: string
            description: The end date of the data.
            example: end=2016-01-29T16:04:27.000Z
          asset:
            type: string
            description: Include asset data.
            example: asset=1
            required: false
          device:
            type: string
            description: Include device data.
            example: device=1
            required: false
          sensor:
            type: string
            description: Include sensor data.
            example: sensor=1
            required: false
        responses:
          200:
            description: |
              Returns an array of telemetry data. The data represents
              the state of the system when the telemetry was captured (asset,
              device and sensor are copied data).
            body:
              application/json:
                example: |
                  [
                    {
                      "tag": "STRING",
                      "timestamp": "DATE",
                      "asset": {
                        "tagCode": "STRING",
                        "name": "STRING",
                        "description": "STRING",
                        "location": {
                          "tagCode": "STRING",
                          "description": "STRING",
                          "geolocation": [NUMBER, NUMBER]
                        }
                      },
                      "device": {
                        "serialNumber": "STRING",
                        "type": "STRING",
                        "description": "STRING"
                      },
                      "sensor": {
                        "type": NUMBER,
                        "typeString": "STRING",
                        "description": "STRING",
                        "unit": "STRING"
                      },
                      "data": {
                        "unit": "STRING",
                        "quality": NUMBER,
                        "values": {
                          "min": NUMBER,
                          "max": NUMBER,
                          "average": NUMBER,
                          "current": NUMBER
                        }
                      }
                    }
                  ]
    /locations:
      securedBy: [JWT]
      get:
        description: Gets an array of locations.
        responses:
          200:
            description: Returns an array of locations for this client.
            body:
              application/json:
                example: |
                  [{
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "tagCode": "STRING",
                    "description": "STRING",
                    "geolocation": [NUMBER, NUMBER],
                    "address": {
                      "street": "STRING",
                      "street2": "STRING",
                      "city": "STRING",
                      "province": "STRING",
                      "postalCode": "STRING",
                      "country": "STRING"
                    },
                    "assets": [{
                      "tagCode": "STRING",
                      "name": "STRING",
                      "description": "STRING"
                    }]
                  }]
      post:
        description: Adds a new location to the client.
        body:
          application/json:
            example: |
              {
                "tagCode": "STRING",
                "description": "STRING",
                "geolocation": [NUMBER, NUMBER],
                "address": {
                  "street": "STRING",
                  "street2": "STRING",
                  "city": "STRING",
                  "province": "STRING",
                  "postalCode": "STRING",
                  "country": "STRING"
                }
              }
        responses:
          200:
            description: Location added.
            body:
              application/json:
                example: |
                  {
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "tagCode": "STRING",
                    "description": "STRING",
                    "geolocation": [NUMBER, NUMBER],
                    "address": {
                      "street": "STRING",
                      "street2": "STRING",
                      "city": "STRING",
                      "province": "STRING",
                      "postalCode": "STRING",
                      "country": "STRING"
                    }
                  }
    /assets:
      securedBy: [JWT]
      get:
        description: Gets an array of assets.
        responses:
          200:
            body:
              application/json:
                example: |
                  [{
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "tagCode": "STRING",
                    "name": "STRING",
                    "description": "STRING",
                    "location": {
                      "tagCode": "STRING",
                      "description": "STRING",
                      "geolocation": [NUMBER, NUMBER],
                      "address": {
                        "street": "STRING",
                        "street2": "STRING",
                        "city": "STRING",
                        "province": "STRING",
                        "postalCode": "STRING",
                        "country": "STRING"
                      }
                    }
                  }]
      post:
        description: Adds a new asset.
        body:
          application/json:
            example: |
              {
                "tagCode": "STRING",
                "name": "STRING",
                "description": "STRING",
                "locationId": "OBJECT_ID"
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "tagCode": "STRING",
                    "name": "STRING",
                    "description": "STRING",
                    "location": {
                      "tagCode": "STRING",
                      "description": "STRING",
                      "geolocation": [NUMBER, NUMBER],
                      "address": {
                        "street": "STRING",
                        "street2": "STRING",
                        "city": "STRING",
                        "province": "STRING",
                        "postalCode": "STRING",
                        "country": "STRING"
                      }
                  }
    /devices:
      securedBy: [JWT]
      get:
        description: Gets an array of the client's devices.
        responses:
          200:
            description: An array of devices.
            body:
              application/json:
                example: |
                  [{
                    "_id": : "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "serialNumber": "STRING",
                    "type": "STRING",
                    "tagCode": "STRING",
                    "description": "STRING",
                    "sensors": [{
                      "tagCode": "STRING",
                      "type": STRING,
                      "typeString": "STRING",
                      "description": "STRING",
                      "unit": "STRING"
                    }],
                    "settings": [{
                      "name": "STRING",
                      "dataType": "STRING",
                      "value": MIXED
                    }]
                  }]
      post:
        description: Adds a new device to the client.
        body:
          application/json:
            example: |
              {
                "serialNumber": "STRING",
                "type": "STRING",
                "tagCode": "STRING",
                "description": "STRING",
                "sensors": [{
                  "tagCode": "STRING",
                  "limits": {
                    "low": NUMBER,
                    "high": NUMBER
                  }
                }],
                "settings": [{
                  "name": "STRING",
                  "dataType": "STRING",
                  "value": MIXED
                }]
              }
        responses:
          200:
            description: Device added.
            body:
              application/json:
                example: |
                  {
                    "_id": : "STRING",
                    "created": "DATE",
                    "updated": "DATE",
                    "serialNumber": "STRING",
                    "type": "STRING",
                    "tagCode": "STRING",
                    "description": "STRING",
                    "sensors": [{
                      "tagCode": "STRING",
                      "limits": {
                        "low": NUMBER,
                        "high": NUMBER
                      }
                    }],
                    "settings": [{
                      "name": "STRING",
                      "dataType": "STRING",
                      "value": MIXED
                    }]
                  }
    /users:
      securedBy: [JWT]
      get:
        description: Gets an array of the client's users.
        responses:
          200:
            description: Returns an array of the client's users.
            body:
              application/json:
                example: |
                  [
                    {
                      "_id": : "OBJECT_ID",
                      "created": "DATE",
                      "updated": "DATE",
                      "firstName": "STRING",
                      "lastName": "STRING",
                      "email": "STRING",
                      "role": "STRING",
                      "active": BOOLEAN
                    }
                  ]
      post:
        description: Adds a new user to the client.
        body:
          application/json:
            example: |
              {
                "firstName": "STRING",
                "lastName": "STRING",
                "email": "STRING",
                "role": "STRING",
                "active": BOOLEAN
              }
        responses:
          200:
            description: User added.
            body:
              application/json:
                example: |
                  {
                    "_id": "OBJECT_ID",
                    "created": "DATE",
                    "updated": "DATE",
                    "firstName": "STRING",
                    "lastName": "STRING",
                    "email": "STRING",
                    "role": "STRING",
                    "active": BOOLEAN
                  }
/devices:
  displayName: DEVICES
  description: |
    Lets you manipulate your devices and access telemetry.
  securedBy: [JWT]
  get:
    description: |
      Allows you to get a list of all of your devices.
    responses:
      200:
        description: Returns an array of all of your devices.
        body:
          application/json:
            example: |
              [
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "serialNumber": "STRING",
                  "type": "STRING",
                  "code": "STRING",
                  "description": "STRING"
                }
              ]
  /{id}:
    description: |
      Allows you to work with an individual device.
    securedBy: [JWT]
    uriParameters:
      id:
        description: The device's object ID
        type: string
    get:
      description: |
        Returns a single device.
      responses:
        200:
          description: Returns a device.
          body:
            application/json:
              example: |
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "serialNumber": "STRING",
                  "type": "STRING",
                  "code": "STRING",
                  "description": "STRING"
                }
    put:
      description: |
        Allows you to edit an existing device.
      body:
        application/json:
          example: |
            {
              "type": "STRING",
              "code": "STRING",
              "description": "STRING"
            }
      responses:
        200:
          description: Device saved.
          body:
            application/json:
              example: |
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "serialNumber": "STRING",
                  "type": "STRING",
                  "code": "STRING",
                  "description": "STRING"
                }
    /sensors:
      securedBy: [JWT]
      get:
        description: |
          Allows you to get the sensors available on the device.
        responses:
          200:
            description: Returns the sensors available on the device.
            body:
              application/json:
                example: |
                  [{
                    "_id": "OBJECT_ID",
                    "type": NUMBER,
                    "typeString": "STRING",
                    "tagCode": "STRING",
                    "description": "STRING",
                    "unit": "STRING",
                    "limits": {
                      "high": NUMBER,
                      "low": NUMBER
                    }
                  }]
      /{sensor_id}:
        securedBy: [JWT]
        uriParameters:
          sensor_id:
            description: The sensor's object ID
            type: string
        get:
          description: |
            Allows you to get details on a single sensor on the device.
          responses:
            200:
              description: Returns the details of a single sensor.
              body:
                application/json:
                  example: |
                    {
                      "_id": "OBJECT_ID",
                      "type": NUMBER,
                      "typeString": "STRING",
                      "tagCode": "STRING",
                      "description": "STRING",
                      "unit": "STRING",
                      "limits": {
                        "high": NUMBER,
                        "low": NUMBER
                      }
                    }
        /limits:
          securedBy: [JWT]
          get:
            description: |
              Allows you to get the limits set for the sensor.
            responses:
              200:
                description: Returns the limits.
                body:
                  application/json:
                    example: |
                      {
                        "high": NUMBER,
                        "low": NUMBER
                      }
          put:
            description: |
              Allows you to set the limits.
            body:
              application/json:
                example: |
                  {
                    "high": NUMBER,
                    "low": NUMBER
                  }
            responses:
              200:
                description: Successful.
                body:
                  application/json:
                    example: |
                      {
                        "high": NUMBER,
                        "low": NUMBER
                      }
    /settings:
      securedBy: [JWT]
      get:
        description: |
          Allows you to get the settings for a device.
        responses:
          200:
            description: |
              Returns the settings for a device. The setting are an
              array of settings objects that contain the name (or key) of the
              setting, the data type of the setting and the value.
            body:
              application/json:
                example: |
                  [
                    {
                      "name": "normalrate",
                      "dataType": "NUMBER",
                      "value": 80
                    },
                    {
                      "name": "deadband",
                      "dataType": "NUMBER",
                      "value": 200
                    },
                    {
                      "name": "bufferallduration",
                      "dataType": "NUMBER",
                      "value": 60
                    },
                    {
                      "name": "preroll",
                      "dataType": "NUMBER",
                      "value": 30
                    },
                    {
                      "name": "postroll",
                      "dataType": "NUMBER",
                      "value": 45
                    },
                    {
                      "name": "starttime",
                      "dataType": "DATE",
                      "value": "2016-01-29T16:04:27.000Z"
                    },
                    {
                      "name": "endtime",
                      "dataType": "DATE",
                      "value": "2016-01-29T16:04:27.000Z"
                    }
                  ]
      put:
        description: |
          Allows you to set the settings for a device. This overwrights all
          existing settings with the new settings.
        body:
          application/json:
            example: |
              [
                {
                  "name": "normalrate",
                  "dataType": "NUMBER",
                  "value": 80
                },
                {
                  "name": "deadband",
                  "dataType": "NUMBER",
                  "value": 200
                },
                {
                  "name": "bufferallduration",
                  "dataType": "NUMBER",
                  "value": 60
                },
                {
                  "name": "preroll",
                  "dataType": "NUMBER",
                  "value": 30
                },
                {
                  "name": "postroll",
                  "dataType": "NUMBER",
                  "value": 45
                },
                {
                  "name": "starttime",
                  "dataType": "DATE",
                  "value": "2016-01-29T16:04:27.000Z"
                },
                {
                  "name": "endtime",
                  "dataType": "DATE",
                  "value": "2016-01-29T16:04:27.000Z"
                }
              ]
        responses:
          200:
            description: Successful
            body:
              application/json:
                example: |
                  [{
                    "name": "STRING",
                    "dataType": "STRING",
                    "value": MIXED
                  }]
    /telemetries:
      securedBy: [JWT]
      get:
        description: |
          Returns telemetry data.
        queryParameters:
          start:
            example: start=2016-01-29T16:04:27.000Z
          end:
            example: end=2016-01-29T16:04:27.000Z
          sensors:
            example: sensors=temp&sensors=pres&sensors=humi&sensors=aclx&sensors=acly&sensors=aclz&sensors=shck
        responses:
          200:
            description: An array of telemetries
            body:
              application/json:
                example: |
                  [
                    {
                      "tag": "STRING",
                      "timestamp": "DATE",
                      "device": {
                        "serialNumber": "STRING",
                        "type": "STRING",
                        "description": "STRING",
                        "geolocation": [NUMBER, NUMBER]
                      },
                      "sensor": {
                        "type": NUMBER,
                        "typeString": "STRING",
                        "description": "STRING",
                        "unit": "STRING"
                      },
                      "data": {
                        "unit": "STRING",
                        "quality": NUMBER,
                        "values": {
                          "min": NUMBER,
                          "max": NUMBER,
                          "average": NUMBER,
                          "current": NUMBER
                        }
                      }
                    }
                  ]
/locations/{id}:
  displayName: LOCATIONS
  description: |
    Lets you view and edit a location.
  securedBy: [JWT]
  get:
    description: Gets a single location.
    responses:
      200:
        description: A single location.
        body:
          application/json:
            example: |
              {
                "_id": : "OBJECT_ID",
                "created": "DATE",
                "updated": "DATE",
                "tagCode": "STRING",
                "description": "STRING",
                "geolocation": [NUMBER, NUMBER],
                "address": {
                  "street": "STRING",
                  "street2": "STRING",
                  "city": "STRING",
                  "province": "STRING",
                  "postalCode": "STRING",
                  "country": "STRING"
                }
              }
  put:
    description: Updates a location.
    body:
      application/json:
        example: |
          {
            "tagCode": "STRING",
            "description": "STRING",
            "geolocation": [NUMBER, NUMBER],
            "address": {
              "street": "STRING",
              "street2": "STRING",
              "city": "STRING",
              "province": "STRING",
              "postalCode": "STRING",
              "country": "STRING"
            }
          }
    responses:
      200:
        description: Location updated.
        body:
          application/json:
            example: |
              {
                "_id": : "OBJECT_ID",
                "created": "DATE",
                "updated": "DATE",
                "tagCode": "STRING",
                "description": "STRING",
                "geolocation": [NUMBER, NUMBER],
                "address": {
                  "street": "STRING",
                  "street2": "STRING",
                  "city": "STRING",
                  "province": "STRING",
                  "postalCode": "STRING",
                  "country": "STRING"
                }
              }
/users:
  displayName: USERS
  description: |
    Lets you manipulate users.
  securedBy: [JWT]
  get:
    description: Gets an array of users.
    responses:
      200:
        description: Returns as array of users.
        body:
          application/json:
            example: |
              [
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "firstName": "STRING",
                  "lastName": "STRING",
                  "email": "STRING",
                  "role": "STRING",
                  "active": BOOLEAN
                }
              ]
  /{id}:
    securedBy: [JWT]
    get:
      description: Gets a single user.
      responses:
        200:
          description: Returns a single user.
          body:
            application/json:
              example: |
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "firstName": "STRING",
                  "lastName": "STRING",
                  "email": "STRING",
                  "role": "STRING",
                  "active": BOOLEAN
                }
    put:
      description: Edits a user (can't change password).
      body:
        application/json:
          example: |
            {
              "firstName": "STRING",
              "lastName": "STRING",
              "email": "STRING",
              "role": "STRING",
              "active": BOOLEAN
            }
      responses:
        200:
          description: User updated.
          body:
            application/json:
              example: |
                {
                  "_id": "OBJECT_ID",
                  "created": "DATE",
                  "updated": "DATE",
                  "firstName": "STRING",
                  "lastName": "STRING",
                  "email": "STRING",
                  "role": "STRING",
                  "active": BOOLEAN
                }
    /password:
      securedBy: [JWT]
      put:
        description: Changes a user's password.
        body:
          application/json:
            example: |
              {
                "newPassword", "STRING"
              }
        responses:
          200:
            description: Password changed.
            body:
              application/json:
                example: |
                  {
                    "message": "The password has been changed."
                  }
