#%RAML 1.0
title: Terepac ONE
version: v1
baseUri: https://api.terepac.one/{version}
annotationTypes:
  role:
    enum: [ADMIN]
securitySchemes:
  JWT:
    description: A JSON Web Token & Client ID must be sent in the request header.
    type: x-jwt
    describedBy:
      headers:
        x-access-token:
          type: string
          description: A JWT access token. Get the JWT using /authenticate
        x-client-id:
          type: string
          description: Your unique client ID.
      responses:
        417:
          body:
            application/json:
              example: |
                {
                  "code": "417",
                  "message": "invalid api key"
                }
documentation:
  - title: Welcome
    content: |
      The Terepac ONE RESTful API uses JSON Web Tokens (JWT) to authenticate each
      request. Each secured request requires the following 2 HTTP headers:
      ```
      x-client-id: [client ID]
      x-access-token: [jwt]
      ```
      As we are only in alpha right now, only Terepac partners can get a
      login. If you are a partner, please contact
      [Darryl Patterson](mailto:darryl.patterson@terepac.com).
      Please see the AUTHENTICATION documentation to find out how to get
      your JWT.

/authentication:
  displayName: AUTHENTICATION
  description: |
    Pass on the email address and password as JSON. The system will return
    a JWT that will be used for future secured API requests.

    If there is an issue with the client ID or JWT, the system will return
    an error as a JSON document. Here are the two possible error responses:
    ```
    HTTP status code 401
    {
      message: 'The supplied x-access-token (JWT) is not valid.'
    }
    ```
    ```
    HTTP status code 401
    {
      message: 'One or both of the required headers (x-client-id, x-access-token) are missing.'
    }
    ```
  post:
    description: |
      Authenticates the user and returns a JSON Web Token.
    body:
      application/json:
        example: |
          {
            "email": "john@example.com",
            "password": "super_secret"
          }
    responses:
      200:
        description: Authenticate was successful.
        body:
          application/json:
            example: |
              {
                "message": "Authentication successful.",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
              }
      404:
        description: The email and/or the password were incorrect.
        body:
          application/json:
            example: |
              {
                "message": "Authentication failed. User not found."
              }
      409:
        description: There is no client associated with the user. Contact Terepac to get this fixed.
        body:
          application/json:
            example: |
              {
                "message": "No client associated with user."
              }
/clients:
  displayName: CLIENTS
  description: |
    Lets you manipulate and access client data and telemetry tags.
  securedBy: [JWT]
  get:
    description: |
      Allows you to get a list of the clients you are allowed to access based on
      the user's role. If the user belongs to a company that's a reseller, an
      array of the reseller's clients is returned.
    responses:
      200:
        description: Returns an array of clients.
        body:
          application/json:
            example: |
              [
                {
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "apikey": {
                    "id": "[CLIENT_ID]"
                  },
                  "companyName": "[COMPANY_NAME]",
                  "address": {
                    "street": "[STREET]",
                    "street2": "[STREET_2]",
                    "city": "[CITY]",
                    "province": "[PROVINCE]",
                    "postalCode": [POSTAL_CODE]"",
                    "country": "[COUNTRY]"
                  },
                  "contact": {
                    "firstName": "[FIRST_NAME]",
                    "lastName": "[LAST_NAME]",
                    "email": "[EMAIL_ADDRESS]",
                    "phone": "[PHONE_NUMBER]"
                  },
                  "reseller": [true|false]
                }
              ]
      401:
        description: Not authorized.
        body:
          application/json:
            example: |
              {
                message: "You are not authorized to access this resource."
              }
  post:
    (role) : ADMIN
    description: |
      Allows you to add a new client. You must be a reseller or be an admin to
      add a new client.
    body:
      application/json:
        example: |
          {
            "companyName": "[COMPANY_NAME]",
            "address": {
              "street": "[STREET]",
              "street2": "[STREET_2]",
              "city": "[CITY]",
              "province": "[PROVINCE]",
              "postalCode": [POSTAL_CODE]"",
              "country": "[COUNTRY]"
            },
            "contact": {
              "firstName": "[FIRST_NAME]",
              "lastName": "[LAST_NAME]",
              "email": "[EMAIL_ADDRESS]",
              "phone": "[PHONE_NUMBER]"
            },
            "reseller": [true|false]
          }
    responses:
      200:
        description: Returns the added client.
        body:
          application/json:
            example: |
              {
                "created": "2016-01-29T16:04:27.000Z",
                "updated": "2016-01-29T16:04:27.000Z",
                "apikey": {
                  "id": "[CLIENT_ID]"
                },
                "companyName": "[COMPANY_NAME]",
                "address": {
                  "street": "[STREET]",
                  "street2": "[STREET_2]",
                  "city": "[CITY]",
                  "province": "[PROVINCE]",
                  "postalCode": [POSTAL_CODE]"",
                  "country": "[COUNTRY]"
                },
                "contact": {
                  "firstName": "[FIRST_NAME]",
                  "lastName": "[LAST_NAME]",
                  "email": "[EMAIL_ADDRESS]",
                  "phone": "[PHONE_NUMBER]"
                },
                "reseller": [true|false]
              }
      400:
        description: Database error adding the client.
        body:
          application/json:
            example: |
              {
                message: "Error inserting the client: [ERROR_MESSAGE]"
              }
      401:
        description: Not authorized.
        body:
          application/json:
            example: |
              {
                message: "You are not authorized to access this resource."
              }
  /{id}:
    description: |
      Allows you to work with an individual client.
    securedBy: [JWT]
    uriParameters:
      id:
        description: The clients's ObjectId.
        type: string
    get:
      description: |
        Returns a single client.
      responses:
        200:
          description: Returns a client.
          body:
            application/json:
              example: |
                {
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "apikey": {
                    "id": "[CLIENT_ID]"
                  },
                  "companyName": "[COMPANY_NAME]",
                  "address": {
                    "street": "[STREET]",
                    "street2": "[STREET_2]",
                    "city": "[CITY]",
                    "province": "[PROVINCE]",
                    "postalCode": [POSTAL_CODE]"",
                    "country": "[COUNTRY]"
                  },
                  "contact": {
                    "firstName": "[FIRST_NAME]",
                    "lastName": "[LAST_NAME]",
                    "email": "[EMAIL_ADDRESS]",
                    "phone": "[PHONE_NUMBER]"
                  },
                  "reseller": [true|false]
                }
        401:
          description: Not authorized.
          body:
            application/json:
              example: |
                {
                  message: "You are not authorized to access this resource."
                }
        404:
          description: Client not found.
          body:
            application/json:
              example: |
                {
                  message: "Client not found"
                }
    put:
      description: |
        Allows you to edit a client. All fields are optional. You cannot change
        a password with this endpoint (see USERS endpoint).
      body:
        application/json:
          example: |
            {
              "companyName": "[COMPANY_NAME]",
              "address": {
                "street": "[STREET]",
                "street2": "[STREET_2]",
                "city": "[CITY]",
                "province": "[PROVINCE]",
                "postalCode": [POSTAL_CODE]"",
                "country": "[COUNTRY]"
              },
              "contact": {
                "firstName": "[FIRST_NAME]",
                "lastName": "[LAST_NAME]",
                "email": "[EMAIL_ADDRESS]",
                "phone": "[PHONE_NUMBER]"
              },
              "reseller": [true|false]
            }
      responses:
        200:
          description: Client saved.
          body:
            application/json:
              example: |
                {
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "apikey": {
                    "id": "[CLIENT_ID]"
                  },
                  "companyName": "[COMPANY_NAME]",
                  "address": {
                    "street": "[STREET]",
                    "street2": "[STREET_2]",
                    "city": "[CITY]",
                    "province": "[PROVINCE]",
                    "postalCode": [POSTAL_CODE]"",
                    "country": "[COUNTRY]"
                  },
                  "contact": {
                    "firstName": "[FIRST_NAME]",
                    "lastName": "[LAST_NAME]",
                    "email": "[EMAIL_ADDRESS]",
                    "phone": "[PHONE_NUMBER]"
                  },
                  "reseller": [true|false]
                }
        401:
          description: Not authorized.
          body:
            application/json:
              example: |
                {
                  message: "You are not authorized to access this resource."
                }
        404:
          description: Client not found.
          body:
            application/json:
              example: |
                {
                  "message": "Client not found"
                }
    /tags:
      securedBy: [JWT]
      get:
        description: Gets a list of the client's tags.
        responses:
          200:
            description: Returns the available tags for the client.
            body:
              application/json:
                example: |
                  [
                    { "tag": "LOCATION_DEVICE_SENSOR" },
                    { "tag": "LOCATION_DEVICE_SENSOR" },
                    { "tag": "LOCATION_DEVICE_SENSOR" }
                  ]
          401:
            description: Not authorized.
            body:
              application/json:
                example: |
                  {
                    message: "You are not authorized to access this resource."
                  }
          404:
            description: Client not found.
            body:
              application/json:
                example: |
                  {
                    "message": "Client not found"
                  }
      /{tag}:
        securedBy: [JWT]
        uriParameters:
          tag:
            description: The tag.
            type: string
        get:
          description: Gets the telemetry data for a single tag.
          responses:
            200:
              description: Telemetry found.
              body:
                application/json:
                  example: |
                    {
                      "tag": "[TAG]",
                      "timestamp": "[DATE]",
                      "device": {
                        "serialNumber": "",
                        "type": "",
                        "descriptor": "",
                        "geolocation": [x, y]
                      },
                      "sensor": {
                        "type": 1,
                        "typeString": "",
                        "description": "",
                        "unit", ""
                      },
                      "data": {
                        "unit": "",
                        "quality": 1,
                        "values": {
                          "min": 5,
                          "max": 5,
                          "average": 5,
                          "current": 5
                        }
                      }
                    }
      /search:
        securedBy: [JWT]
        description: |
          Allows you to search multiple tags. Returns an array of telemetry
          data.
        get:
          description: Queries for telemetry using tags.
          queryParameters:
            tags:
              example: tags=D001_LOC1_TI,D002_LOC1_EI
            start:
              example: start=2016-01-29T16:04:27.000Z
            end:
              example: end=2016-01-29T16:04:27.000Z
          responses:
            200:
              description: Returns an array of telemetry data.
              body:
                application/json:
                  example: |
                    [
                      {
                        "tag": "[TAG]",
                        "timestamp": "[DATE]",
                        "device": {
                          "serialNumber": "",
                          "type": "",
                          "descriptor": "",
                          "geolocation": [x, y]
                        },
                        "sensor": {
                          "type": 1,
                          "typeString": "",
                          "description": "",
                          "unit", ""
                        },
                        "data": {
                          "unit": "",
                          "quality": 1,
                          "values": {
                            "min": 5,
                            "max": 5,
                            "average": 5,
                            "current": 5
                          }
                        }
                      }
                    ]
    /locations:
      securedBy: [JWT]
      get:
        description: Gets an array of locations.
        responses:
          200:
            description: Returns an array of locations for this client.
            body:
              application/json:
                example: |
                  [{
                    "tagCode": "",
                    "description": "",
                    "geolocation": [x, y],
                    "address": {
                      "street": "",
                      "street2": "",
                      "city": "",
                      "province": "",
                      "postalCode": "",
                      "country": ""
                    },
                    "assets": [{
                      "tagCode": "",
                      "name": "",
                      "description": ""
                    }]
                  }]
      post:
        description: Adds a new location to the client.
        body:
          application/json:
            example: |
              {
                "tagCode": "",
                "description": "",
                "geolocation": [x, y],
                "address": {
                  "street": "",
                  "street2": "",
                  "city": "",
                  "province": "",
                  "postalCode": "",
                  "country": ""
                }
              }
        responses:
          200:
            description: Location added.
            body:
              application/json:
                example: |
                  {
                    "id": "",
                    "tagCode": "",
                    "description": "",
                    "geolocation": [x, y],
                    "address": {
                      "street": "",
                      "street2": "",
                      "city": "",
                      "province": "",
                      "postalCode": "",
                      "country": ""
                    }
                  }
      /{id}:
        securedBy: [JWT]
        get:
          description: Gets a single location.
          responses:
            200:
              description: A single location.
              body:
                application/json:
                  example: |
                    {
                      "id": "",
                      "tagCode": "",
                      "description": "",
                      "geolocation": [x, y],
                      "address": {
                        "street": "",
                        "street2": "",
                        "city": "",
                        "province": "",
                        "postalCode": "",
                        "country": ""
                      }
                    }
        put:
          description: Updates a location.
          body:
            application/json:
              example: |
                {
                  "tagCode": "",
                  "description": "",
                  "geolocation": [x, y],
                  "address": {
                    "street": "",
                    "street2": "",
                    "city": "",
                    "province": "",
                    "postalCode": "",
                    "country": ""
                  }
                }
          responses:
            200:
              description: Location updated.
              body:
                application/json:
                  example: |
                    {
                      "id": "",
                      "tagCode": "",
                      "description": "",
                      "geolocation": [x, y],
                      "address": {
                        "street": "",
                        "street2": "",
                        "city": "",
                        "province": "",
                        "postalCode": "",
                        "country": ""
                      }
                    }
    /assets:
      securedBy: [JWT]
      get:
        description: Gets an array of assets.
        responses:
          200:
            body:
              application/json:
                example: |
                  [{
                    "id": "",
                    "tagCode": "",
                    "name": "",
                    "description": "",
                    "location": {
                      "tagCode": "",
                      "description": "",
                      "geolocation": [x, y],
                      "address": {
                        "street": "",
                        "street2": "",
                        "city": "",
                        "province": "",
                        "postalCode": "",
                        "country": ""
                      }
                    }
                  }]
      post:
        description: Adds a new asset.
        body:
          application/json:
            example: |
              {
                "tagCode": "",
                "name": "",
                "description": ""
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "id", "",
                    "tagCode": "",
                    "name": "",
                    "description": ""
                  }
      /{id}:
        securedBy: [JWT]
        get:
          description: Gets a single asset.
          responses:
            200:
              description: Gets a single asset.
              body:
                application/json:
                  example: |
                    {
                      "id", "",
                      "tagCode": "",
                      "name": "",
                      "description": ""
                    }
        put:
          description: Updates an asset.
          body:
            application/json:
              example: |
                {
                  "tagCode": "",
                  "name": "",
                  "description": ""
                }
          responses:
            200:
              description: Asset updated.
              body:
                application/json:
                  example: |
                    {
                      "id": "",
                      "tagCode": "",
                      "name": "",
                      "description": ""
                    }
        /devices:
          securedBy: [JWT]
          get:
            description: Gets an array of devices attached to this asset.
            responses:
              200:
                description: Returns an array of devices.
                body:
                  application/json:
                    example: |
                      [{
                        "created": "2016-01-29T16:04:27.000Z",
                        "updated": "2016-01-29T16:04:27.000Z",
                        "serialNumber": "15",
                        "type": "hydrant",
                        "tagLocation": "",
                        "tagCode": "Client assigned code",
                        "descriptor": "Client assigned descriptor",
                        "geolocation": [x, y],
                        "sensors":
                          [
                            {
                              "tagCode": "",
                              "type": 1,
                              "typeString": "",
                              "description": "",
                              "unit": ""
                            }
                          ],
                        "settings": {
                        }
                      }]
          /{id}/add:
            securedBy: [JWT]
            post:
              description: Adds this device to this asset.
              responses:
                200:
                  description: Deviced added to asset.
                  body:
                    application/json:
                      example: |
                        {
                          "message": "Device added."
                        }
          /{id}/remove:
            securedBy: [JWT]
            delete:
              description: Removes this device from this asset.
              responses:
                200:
                  description: Deviced removed from asset.
                  body:
                    application/json:
                      example: |
                        {
                          "message": "Device removed."
                        }
    /devices:
      securedBy: [JWT]
      get:
        description: Gets an array of the client's devices.
        responses:
          200:
            description: An array of devices.
            body:
              application/json:
                example: |
                  [{
                    "created": "2016-01-29T16:04:27.000Z",
                    "updated": "2016-01-29T16:04:27.000Z",
                    "serialNumber": "15",
                    "type": "hydrant",
                    "tagLocation": "",
                    "tagCode": "Client assigned code",
                    "descriptor": "Client assigned descriptor",
                    "geolocation": [x, y],
                    "sensors":
                      [
                        {
                          "tagCode": "",
                          "type": 1,
                          "typeString": "",
                          "description": "",
                          "unit": ""
                        }
                      ],
                    "settings": {
                    }
                  }]
      post:
        description: Adds a new device to the client.
        body:
          application/json:
            example: |
              {
                "serialNumber": "",
                "type": "",
                "tagLocation": "",
                "tagCode": "",
                "descriptor": "",
                "geolocation": [x, y],
                "sensors": [
                  {
                    "tagCode": "",
                    "limits": {
                      "low": 5,
                      "high": 10
                    }
                  }
                ]
                "settings": {}
              }
        responses:
          200:
            description: Device added.
            body:
              application/json:
                example: |
                  {
                    "id": "",
                    "created": "2016-01-29T16:04:27.000Z",
                    "updated": "2016-01-29T16:04:27.000Z",
                    "serialNumber": "",
                    "type": "",
                    "tagLocation": "",
                    "tagCode": "",
                    "descriptor": "",
                    "geolocation": [x, y],
                    "sensors": [
                      {
                        "tagCode": "",
                        "limits": {
                          "low": 5,
                          "high": 10
                        }
                      }
                    ]
                    "settings": {}
                  }
    /users:
      securedBy: [JWT]
      get:
        description: Gets an array of the client's users.
        responses:
          200:
            description: Returns an array of the client's users.
            body:
              application/json:
                example: |
                  [
                    {
                      "id": "",
                      "created": "2016-01-29T16:04:27.000Z",
                      "updated": "2016-01-29T16:04:27.000Z",
                      "firstName": "",
                      "lastName": "",
                      "email": "",
                      "roles": [""],
                      "active": true
                    }
                  ]
      post:
        description: Adds a new user to the client.
        body:
          application/json:
            example: |
              {
                "firstName": "",
                "lastName": "",
                "email": "",
                "roles": [""],
                "active": true
              }
        responses:
          200:
            description: User added.
            body:
              application/json:
                example: |
                  {
                    "id": "",
                    "created": "2016-01-29T16:04:27.000Z",
                    "updated": "2016-01-29T16:04:27.000Z",
                    "firstName": "",
                    "lastName": "",
                    "email": "",
                    "roles": [""],
                    "active": true
                  }

/users:
  displayName: USERS
  description: |
    Lets you manipulate users.
  securedBy: [JWT]
  get:
    description: Gets an array of users.
    responses:
      200:
        description: Returns as array of users.
        body:
          application/json:
            example: |
              [
                {
                  "id": "",
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "firstName": "",
                  "lastName": "",
                  "email": "",
                  "roles": [""],
                  "active": true
                }
              ]
  /{id}:
    securedBy: [JWT]
    get:
      description: Gets a single user.
      responses:
        200:
          description: Returns a single user.
          body:
            application/json:
              example: |
                {
                  "id": "",
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "firstName": "",
                  "lastName": "",
                  "email": "",
                  "roles": [""],
                  "active": true
                }
    put:
      description: Edits a user (can't change password).
      body:
        application/json:
          example: |
            {
              "firstName": "",
              "lastName": "",
              "email": "",
              "roles": [""],
              "active": true
            }
      responses:
        200:
          description: User updated.
          body:
            application/json:
              example: |
                {
                  "message": "User has been edited."
                }
    /password:
      securedBy: [JWT]
      put:
        description: Changes a user's password.
        body:
          application/json:
            example: |
              {
                "id": "",
                "password", ""
              }
        responses:
          200:
            description: Password changed.
            body:
              application/json:
                example: |
                  {
                    "message": "The password has been changed."
                  }
/devices:
  displayName: DEVICES
  description: |
    Lets you manipulate your devices and access telemetry.
  securedBy: [JWT]
  get:
    description: |
      Allows you to get a list of all of your devices.
    responses:
      200:
        description: Returns an array of all of your devices.
        body:
          application/json:
            example: |
              [
                {
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "serialNumber": "15",
                  "type": "hydrant",
                  "code": "Client assigned code",
                  "descriptor": "Client assigned descriptor"
                }
              ]
  /{id}:
    description: |
      Allows you to work with an individual device.
    securedBy: [JWT]
    uriParameters:
      id:
        description: The device's serial number
        type: string
    get:
      description: |
        Returns a single device.
      responses:
        200:
          description: Returns a device.
          body:
            application/json:
              example: |
                {
                  "created": "2016-01-29T16:04:27.000Z",
                  "updated": "2016-01-29T16:04:27.000Z",
                  "serialNumber": "15",
                  "type": "hydrant",
                  "code": "Client assigned code",
                  "descriptor": "Client assigned descriptor"
                }
        404:
          description: Device not found.
          body:
            application/json:
              example: |
                {
                  "message": "Device not found"
                }
    put:
      description: |
        Allows you to edit an existing device.
      body:
        application/json:
          example: |
            {
              "code": "Client assigned code",
              "descriptor": "Client assigned descriptor"
            }
      responses:
        200:
          description: Device saved.
          body:
            application/json:
              example: |
                {
                  "message": "Device saved."
                }
        404:
          description: Device not found.
          body:
            application/json:
              example: |
                {
                  "message": "Device not found"
                }
    /settings:
      securedBy: [JWT]
      get:
        description: |
          Allows you to get the settings for a device.
        responses:
          200:
            description: Returns the settings for a device.
            body:
              application/json:
                example: |
                  {
                    "serialNumber": "15",
                    "code": "Client assigned code",
                    "normalrate": 0,
                    "highlimit": 0,
                    "lowlimit": 0,
                    "deadband": 0,
                    "bufferallduration": 0,
                    "preroll": 0,
                    "postroll": 0,
                    "starttime": "2016-01-29T16:04:27.000Z",
                    "stoptime": "2016-01-29T16:04:27.000Z"
                  }
          404:
            description: Device not found.
            body:
              application/json:
                example: |
                  {
                    "message": "Device not found"
                  }
      put:
        description: |
          Allows you to set the settings for a device.
        body:
          application/json:
            example: |
              {
                "normalrate": 0,
                "highlimit": 0,
                "lowlimit": 0,
                "deadband": 0,
                "bufferallduration": 0,
                "preroll": 0,
                "postroll": 0,
                "starttime": "2016-01-29T16:04:27.000Z",
                "stoptime": "2016-01-29T16:04:27.000Z"
              }
        responses:
          200:
            description: Successful
            body:
              application/json:
                example: |
                  {
                    "message": "Settings have been saved"
                  }
          404:
            description: Device not found.
            body:
              application/json:
                example: |
                  {
                    "message": "Device not found"
                  }
    /telemetries:
      securedBy: [JWT]
      get:
        description: |
          Returns telemetry data.
        queryParameters:
          start:
            example: start=2016-01-29T16:04:27.000Z
          end:
            example: end=2016-01-29T16:04:27.000Z
          sensors:
            example: sensors=temp&sensors=pres&sensors=humi&sensors=aclx&sensors=acly&sensors=aclz&sensors=shck
        responses:
          200:
            description: An array of telemetries
            body:
              application/json:
                example: |
                  [
                    {
                      "tag": "[TAG]",
                      "timestamp": "[DATE]",
                      "device": {
                        "serialNumber": "",
                        "type": "",
                        "descriptor": "",
                        "geolocation": [x, y]
                      },
                      "sensor": {
                        "type": 1,
                        "typeString": "",
                        "description": "",
                        "unit", ""
                      },
                      "data": {
                        "unit": "",
                        "quality": 1,
                        "values": {
                          "min": 5,
                          "max": 5,
                          "average": 5,
                          "current": 5
                        }
                      }
                    }
                  ]
          404:
            description: Device not found.
            body:
              application/json:
                example: |
                  {
                    "message": "Device not found"
                  }
